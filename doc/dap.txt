*dap.txt* Debug Adapter Protocol support for neovim


nvim-dap implements the Debug Adapter Protocol.

  https://microsoft.github.io/debug-adapter-protocol/


Neovim acts as the client for the debug adapter protocol and provides features
to launch debug adapters, debugee's and to then step through code and explore
the state of the application being debugged.


                                      Type |gO| to see the table of contents.

==============================================================================
ADAPTER CONFIGURATION                                *dap-adapters*


Neovim needs a debug-adapter with which it can communicate. Neovim can either
launch the debug-adapter itself, or it can attach to an existing one.


To tell Neovim if it should launch a debug adapter or connect to one, and if
so, how, you need to configure them via the `dap.adapters` table. The key of
the table is an arbitrary name that debug adapters are looked up by when using
a |dap-configuration|.

For example, to register a debug-adapter under the type `python`:

>
    lua << EOF
    local dap = require('dap')
    dap.adapters.python = {
      type = 'executable';
      command = os.getenv('HOME') .. '/.virtualenvs/tools/bin/python';
      args = { '-m', 'debugpy.adapter' };
    }
    EOF


`dap.adapters.<name>` is set to a `Adapter`.

The `Adapter` needs to contain a `type`, which can be one of:

- `executable`, to indicate that Neovim must launch the debug-adapter.
- `server`, to indicate that Neovim can connect to an already running
  debug-adapter.

For `executable` the following options are supported:

>
    command: string     -- command to invoke
    args:    string[]   -- arguments for the command
    options?: {
      env?: {}          -- Set the environment variables for the command
      cwd?: string      -- Set the working directory for the command
    }

For `server` the following options are supported:

>
    host?: string       -- host to connect to, defaults to 127.0.0.1
    port:  number       -- port to connect to


`dap.adapters.<name>` can also be set to a function which takes two arguments.
This first argument is a callback which must be called with the adapter table.
The second argument is the configuration which will later be run.

This can be used to defer the resolving of the values to when a configuration
is used. An example use is java with eclipse.jdt.ls and java-debug, where the
debug-adapter is spawned via a LSP command:
>

    dap.adapters.java = function(callback, config)
      M.execute_command({command = 'vscode.java.startDebugSession'}, function(err0, port)
        assert(not err0, vim.inspect(err0))

        callback({ type = 'server'; host = '127.0.0.1'; port = port; })
      end)
    end
<


There is an additional `enrich_config` property available for both adapter
types. This property is a function which allows an adapter to enrich a
configuration with additional information. It receives a configuration as first
argument, and a callback that must be called with the final configuration as
second argument.

An example use-case of this is the Java Debug Adapter, which can resolve
classPaths or modulePaths dynamically, so that users don't have to do that.

>


    local adapter = {
      type = 'server';
      host = '127.0.0.1';
      port = 8080;
      enrich_config = function(config, on_config)
        local final_config = vim.deepcopy(config)
        final_config.extra_property = 'This got injected by the adapter'
        on_config(final_config)
      end;
    }

<

==============================================================================
DEBUGEE CONFIGURATION                                *dap-configuration*


In addition to having to know how to (launch) and connect to a debug-adapter,
Neovim needs to instruct the debug-adapter how to launch the debugee or how to
connect to it. The debugee is the application you want to debug.

This is configured via a `Configuration`, a `Configuration` has 3 required
fields:

>
    type: string        -- References the Adapter to use
    request: string     -- Either `attach` or `launch`, indicates if the
                        -- debug-adapter in turn should launch a debugee or if
                        -- it can attach to a debugee.
    name: string        -- A user readable name for the configuration
<

It takes any number of further options which are debug-adapter specific.

The configurations are set via the `dap.configurations` table. The keys are
filetypes. If you run |dap-continue| it will look up configurations under the
current files filetype.

An example:

>
    lua << EOF
    local dap = require('dap')
    dap.configurations.python = {
      {
        type = 'python';
        request = 'launch';
        name = "Launch file";
        program = "${file}";
        pythonPath = function(adapter)
          local cwd = vim.fn.getcwd()
          if vim.fn.executable(cwd .. '/venv/bin/python') then
            return cwd .. '/venv/bin/python'
          elseif vim.fn.executable(cwd .. '/.venv/bin/python') then
            return cwd .. '/.venv/bin/python'
          else
            return '/usr/bin/python'
          end
        end;
      },
    }
    EOF


Things to note:

- Values for properties other than the 3 required properties can be functions,
  they will be evaluated once the configuration is used.

- Some variables are supported:

  - `${file}`: Active filename
  - `${workspaceFolder}`: The current working directory of Neovim


==============================================================================
DEBUGEE CONFIGURATION via launch.json                *dap-launch.json*

nvim-dap supports a small subset of the `launch.json` file that is used to
configure debug adapters in Visual Studio Code.

To load the configurations, add the following in `init.vim`:

>

  lua require('dap.ext.vscode').load_launchjs()

<

This extends `dap.configurations` each time it is called, so make sure to only
call it once.

==============================================================================
MAPPINGS                                             *dap-mappings*


Some example mappings:

>
    nnoremap <silent> <F5> :lua require'dap'.continue()<CR>
    nnoremap <silent> <F10> :lua require'dap'.step_over()<CR>
    nnoremap <silent> <F11> :lua require'dap'.step_into()<CR>
    nnoremap <silent> <F12> :lua require'dap'.step_out()<CR>
    nnoremap <silent> <leader>b :lua require'dap'.toggle_breakpoint()<CR>
    nnoremap <silent> <leader>B :lua require'dap'.set_breakpoint(vim.fn.input('Breakpoint condition: '))<CR>
    nnoremap <silent> <leader>lp :lua require'dap'.set_breakpoint(nil, nil, vim.fn.input('Log point message: '))<CR>
    nnoremap <silent> <leader>dr :lua require'dap'.repl.open()<CR>
    nnoremap <silent> <leader>dl :lua require'dap'.repl.run_last()<CR>


==============================================================================
API                                                  *dap-api*

Lua module: dap

The API is currently unstable.

(Incomplete)

continue()                                                      *dap.continue()*
        Continue execution of the debugee, or if no debug session is active,
        start a new debug session based on available |dap-configuration|


run({config})                                                        *dap.run()*
        Looks up a debug adapter entry for the given configuration and runs it.
        This is implicitly called by |dap.continue()| if no debug session is
        active.

        Parameters:
            {config}  |dap-configuration| to run


run_last()                                                      *dap.run_last()*
        Re-runs the last debug-adapter/configuration that ran using
        |dap.run()|.


launch({adapter}, {config})                                       *dap.launch()*
        Launch a new debug adapter and then initialize it with the given
        |dap-configuration|

        Parameters: ~
            {adapter}   `Adapter` to launch, see |dap-adapters|, the `type` is
                        not required in this case.
            {config}    |dap-configuration|


attach({host}, {port}, {config})                                 *dap.attach()*
        Attach to a running debug adapter and then initialize it with the
        given |dap-configuration|


set_breakpoint({condition}, {hit_condition}, {log_message})
                                                          *dap.set_breakpoint()*

        Same as |toggle_breakpoint|, but is guaranteed to overwrite previous 
        breakpoint.

toggle_breakpoint({condition}, {hit_condition}, {log_message})
                                                       *dap.toggle_breakpoint()*

        Creates or removes a breakpoint at the current line.

        Parameters: ~
            {condition}     Optional condition that must be met for the debugger
                            to stop at the breakpoint.
            {hit_condition} Optional hit condition, e.g. a number as a string
                            that tells how often this breakpoint should be visited
                            to stop.
            {log_message}   Optional log message. This transforms the breakpoint 
                            into a log point. Variable interpolation with {foo} is
                            supported within the message.

list_breakpoints()                                     *dap.list_breakpoints()*

        Lists all breakpoints and log points in quickfix window.

set_exception_breakpoints({filters}, {exceptionOptions})
                                              *dap.set_exception_breakpoints()*

    Sets breakpoints on exceptions filtered by `filters`. If `filters` is not
    provided it will prompt the user to choose from the available filters of the
    debug adapter.

    Parameters: ~
        {filters}          A list of exception types to stop on (optional).
                           Most debug adapters offer categories like `"uncaught"` and
                           `"raised"` to filter the exceptions.
                           If set to "default" instead of a table, the
                           default options as recommended by the debug adapter are
                           used.
        {exceptionOptions} ExceptionOptions[]?
                           (https://microsoft.github.io/debug-adapter-protocol/specification#Types_ExceptionOptions)
         
    >
        -- Ask user to stop on which kinds of exceptions
        require'dap'.set_exception_breakpoints()
        -- don't stop on exceptions
        require'dap'.set_exception_breakpoints({})
        -- stop only on certain exceptions (debugpy offers "raised", "uncaught")
        require'dap'.set_exception_breakpoints({"uncaughted"})
        require'dap'.set_exception_breakpoints({"raised", "uncaught"})
        -- use default settings of debug adapter
        require'dap'.set_exception_breakpoints("default")
    <

    You can also set the default value via a `defaults.fallback` table:

    >
        require('dap').defaults.fallback.exception_breakpoints = {'raised'}
    <

    Or per config/adapter type:

    >
        require('dap').defaults.python.exception_breakpoints = {'raised'}
    <

    In this example `python` is the type. This is the same type used in
    |dap-configuration| or the |dap-adapter| definition.


step_over()                                                    *dap.step_over()*
        Requests the debugee to run again for one step.


step_into()                                                    *dap.step_into()*
        Requests the debugee to step into a function or method if possible.
        If it cannot step into a function or method it behaves like
        |dap.step_over()|.


step_out()                                                      *dap.step_out()*
        Requests the debugee to step out of a function or method if possible.

step_back()                                                    *dap.step_back()*
        Steps one step back. Debug adapter must support reverse debugging.

pause({thread_id})                                                 *dap.pause()*
        Requests debug adapter to pause a thread. If there are multiple threads
        it stops `thread_id` from the optional parameter or asks the user which
        thread to pause.

reverse_continue()                                      *dap.reverse_continue()*
        Continues execution reverse in time until last breakpoint.
        Debug adapter must support reverse debugging.

up()                                                                  *dap.up()*
        Go up in current stacktrace without stepping.

down()                                                              *dap.down()*
        Go down in current stacktrace without stepping.


goto_({line})                                                      *dap.goto_()*
        Let the debugger jump to a specific line or line under cursor.

        Parameters: ~
            {line}  Line number or line under cursor if nil.


repl.open({winopts})                                           *dap.repl.open()*
        Open a REPL / Debug-console.

        Parameters: ~
            {winopts}  optional table which may include:
                        `height` to set the window height
                        `width` to set the window width
                        Any other key/value pair, that will be treated as window
                        option.

        The REPL can be used to evaluate expressions. A `omnifunc` is set to
        support completion of expressions. It supports the following special
        commands:

          .exit               Closes the REPL
          .c or .continue     Same as |dap.continue|
          .n or .next         Same as |dap.step_over|
          .into               Same as |dap.step_into|
          .out                Same as |dap.step_out|
          .up                 Same as |dap.up|
          .down               Same as |dap.down|
          .goto               Same as |dap.goto_|
          .scopes             Prints the variables in the current scopes
          .threads            Prints all threads
          .frames             Print the stack frames
          .capabilities       Print the capabilities of the debug adapter
          .b or .back         Same as |dap.step_back|
          .rc or
          .reverse-continue   Same as |dap.reverse_continue|

        You can customize the commands by overriding `dap.repl.commands`:
        >
          dap.repl.commands = vim.tbl_extend('force', dap.repl.commands, {
            continue = {'.continue', '.c'},
            next_ = {'.next', '.n'},
            back = {'.back', '.b'},
            reverse_continue = {'.reverse-continue', '.rc'},
            into = {'.into'},
            out = {'.out'},
            scopes = {'.scopes'},
            threads = {'.threads'},
            frames = {'.frames'},
            exit = {'exit', '.exit'},
            up = {'.up'},
            down = {'.down'},
            goto_ = {'.goto'},
            capabilities = {'.capabilities'},
            -- add your own commands
            custom_commands = {
              ['.echo'] = function(text)
                dap.repl.append(text)
              end
            },
          }

        <


repl.toggle({winopts})                                       *dap.repl.toggle()*
        Opens the REPL if it is closed, otherwise closes it.

        See |dap.repl.open| for a description of the argument.


repl.close()                                                  *dap.repl.close()*
        Closes the REPL if it is open.


set_log_level(level)                                       *dap.set_log_level()*
        Sets the log level. Defaults to `INFO`  >

            :lua require('dap').set_log_level('TRACE')
<

        Available log levels:

          TRACE
          DEBUG
          INFO
          WARN
          ERROR

        The log file is in the |stdpath| `data` folder.
        To print the location:  >

            :lua print(vim.fn.stdpath('data'))
<
        The filename is `nvim-dap.log`


session()                                                        *dap.session()*
        Returns the current session or nil if no session exists.
